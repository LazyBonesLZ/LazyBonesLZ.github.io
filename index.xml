<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ColofulDark Blog</title>
    <link>http://blog.harddone.com/</link>
    <description>Recent content on ColofulDark Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 26 Apr 2019 14:59:41 +0800</lastBuildDate>
    
	<atom:link href="http://blog.harddone.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>http://blog.harddone.com/about/about/</link>
      <pubDate>Fri, 26 Apr 2019 14:59:41 +0800</pubDate>
      
      <guid>http://blog.harddone.com/about/about/</guid>
      <description>No fill now!</description>
    </item>
    
    <item>
      <title>Books</title>
      <link>http://blog.harddone.com/books/books/</link>
      <pubDate>Fri, 26 Apr 2019 14:59:31 +0800</pubDate>
      
      <guid>http://blog.harddone.com/books/books/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Python执行Android adb 命令</title>
      <link>http://blog.harddone.com/post/python_adb/</link>
      <pubDate>Thu, 18 Apr 2019 10:12:15 +0800</pubDate>
      
      <guid>http://blog.harddone.com/post/python_adb/</guid>
      <description>说明 本文以具体的python脚本为例进行说明，两个脚本都是根据开发过程中的业务需求而开发，并不具备通用性。但是其核心代码都是通过python的api执行adb命令：
//example cmd = &#39;adb shell&#39; os.system(cmd)  1.uninstall_clean_app.py 根据app bundle id 卸载应用，并且删除该应用在sdcard目录下生成的文件夹等。当前脚本中所删除的目录是写死的，可以根据需要自己修改。
#!/usr/bin/python import subprocess import os, sys import getopt BASE_DIR = os.path.dirname(os.path.dirname(__file__)) if __name__ == &#39;__main__&#39;: &amp;quot;&amp;quot;&amp;quot; change commands and add shell&amp;quot;&amp;quot;&amp;quot; tag = &#39;&#39; try: opt, args = getopt.getopt(sys.argv[1:], &amp;quot;ht:&amp;quot;, [&#39;pkg&#39;, &#39;help&#39;]) for op, value in opt: if op in (&amp;quot;-t&amp;quot;, &amp;quot;--pkg&amp;quot;): tag = value if op in (&amp;quot;-h&amp;quot;, &amp;quot;--help&amp;quot;): print &amp;quot;Usage: main_app_clean.py -t APP_PKG_NAME&amp;quot; print &amp;quot;Options:&amp;quot; print &amp;quot; -t APP_PKG_NAME should be a bundle id !</description>
    </item>
    
    <item>
      <title>Lua 方法重载</title>
      <link>http://blog.harddone.com/post/lua_override/</link>
      <pubDate>Thu, 18 Apr 2019 10:01:05 +0800</pubDate>
      
      <guid>http://blog.harddone.com/post/lua_override/</guid>
      <description>最近在更新一个Lua项目中，很多地方调用了同一个方法，想在不改动调用逻辑的情况下，如何不执行原来的方法逻辑，而执行新的方法逻辑呢？ 我们可以直接重载该方法，但是前提是必须在第一次调用该方法前就完成了重载。
请注意这种方式的前提：一定是要在该方法第一次被调用前完成你的重载，否则无效。  举例说明： ads_plugin_manager是一个全局对象，在其类文件中已经实现了方法showBanner的逻辑，项目中许多直接调用ads_plugin_manager:showBanner()。现在我想不改动任何调用该方法地方的代码。怎么操作？
 创建lua文件：OverrideAdsPluginManager.lua  ads_lua_manager.showBanner = function(...) --override start -- 请注意，如果方法实现需要访问类的其他方法或者变量，都可以通过ads_lua_manager.xxx的方式直接调用 -- override end end   尽早引用OverrideAdsPluginManager.lua  require &amp;quot;libii/common/OverrideShowBanner&amp;quot;  </description>
    </item>
    
    <item>
      <title>归档</title>
      <link>http://blog.harddone.com/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.harddone.com/archives/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>